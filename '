#include <SDL2/SDL.h>
#include <stdlib.h>
#include <iostream>

using namespace std;

#define framerate 40.0

#define screen_width 640
#define screen_height 480

void must_init(bool succeeded, string message){
	if(!succeeded){
		cout << "Failed to " << message << endl;
	}
	//exit(1);
}

int main(int argc, char* argv[]){
	SDL_Window *window = NULL;
	must_init( SDL_Init(SDL_INIT_EVERYTHING)<0, "initialize everything.");

	window = SDL_CreateWindow("Example", SDL_WINDOWPOS_CENTERED,
			SDL_WINDOWPOS_CENTERED, 640, 480, SDL_WINDOW_SHOWN);

	//SDL_TimerID timer = SDL_AddTimer(framerate, NULL, NULL);
	SDL_Surface *screen = SDL_GetWindowSurface(window);

	SDL_Renderer * renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_SOFTWARE);

	must_init(screen , "get window surface");
	must_init(window," create window");

	bool running = true;

	Uint32 start_tick;
	SDL_Event event;

	while(running){

		start_tick = SDL_GetTicks();

		Uint32 white = SDL_MapRGB(screen->format,  0,255,255);
		SDL_Rect background = {10,0,4,screen_height};
		SDL_FillRect(screen, &background, white);
		SDL_RenderDrawLine(renderer, 0,0,50,50);
		while ( SDL_PollEvent( &event) ){
			if(event.type == SDL_QUIT)
				running = false;
		}
		must_init(SDL_UpdateWindowSurface(window)<0,"update window");
	}


	SDL_DestroyWindow(window);
	SDL_Quit();

	return 0;
}
